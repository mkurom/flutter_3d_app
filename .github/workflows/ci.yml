name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]
  push:
    branches: [ main, develop ]

# Allow only one concurrent deployment per branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Static Analysis & Code Metrics
  analyze:
    name: üìä Static Analysis & Code Metrics
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üê¶ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
          cache: true

      - name: üì¶ Get Dependencies
        run: flutter pub get

      - name: üîç Verify Formatting
        run: dart format --output=none --set-exit-if-changed .

      - name: üßπ Analyze Project
        run: flutter analyze --fatal-infos

      - name: üìà Dart Code Linter Analysis
        run: dart run dart_code_linter:metrics analyze lib --reporter=github

      - name: üîç Check Unused Code
        run: dart run dart_code_linter:metrics check-unused-code lib --reporter=github

  # Job 2: Unit Tests
  test:
    name: üß™ Unit Tests
    runs-on: ubuntu-latest
    needs: analyze
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üê¶ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
          cache: true

      - name: üì¶ Get Dependencies
        run: flutter pub get

      - name: üèóÔ∏è Generate Mock Files
        run: dart run build_runner build --delete-conflicting-outputs

      - name: üß™ Run Unit Tests
        run: flutter test test/features/maze_ball/ --coverage --reporter expanded

      - name: üìä Generate Coverage Report
        run: |
          sudo apt-get update
          sudo apt-get install -y lcov
          genhtml coverage/lcov.info -o coverage/html

      - name: üì§ Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: üíæ Archive Coverage Results
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/

  # Job 3: Integration Tests
  integration-test:
    name: üîÑ Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üê¶ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
          cache: true

      - name: üì¶ Get Dependencies
        run: flutter pub get

      - name: üèóÔ∏è Generate Mock Files
        run: dart run build_runner build --delete-conflicting-outputs

      - name: üîÑ Run All Tests
        id: run_all_tests
        run: flutter test --coverage --reporter expanded

      - name: ‚úÖ Test Summary
        run: |
          echo "## üéâ Integration Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Component           | Status                              |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------------|-------------------------------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests   | ${{ steps.run_all_tests.outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY

  # Job 4: Build Check
  build:
    name: üèóÔ∏è Build Check
    runs-on: ubuntu-latest
    needs: [analyze, test]
    strategy:
      matrix:
        platform: [android, web]
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üê¶ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
          cache: true

      - name: üì¶ Get Dependencies
        run: flutter pub get

      - name: üèóÔ∏è Build for ${{ matrix.platform }}
        run: |
          if [ "${{ matrix.platform }}" == "android" ]; then
            flutter build apk --debug
          elif [ "${{ matrix.platform }}" == "web" ]; then
            flutter build web
          fi

      - name: üì§ Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.platform }}
          path: |
            build/app/outputs/flutter-apk/*.apk
            build/web/
          retention-days: 7

  # Job 5: Code Quality Gate
  quality-gate:
    name: üö™ Quality Gate
    runs-on: ubuntu-latest
    needs: [analyze, test, integration-test, build]
    if: always()
    
    steps:
      - name: üìä Quality Gate Check
        run: |
          echo "## üö™ Quality Gate Results" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.analyze.result }}" == "success" ]; then
            echo "‚úÖ **Static Analysis**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Static Analysis**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.test.result }}" == "success" ]; then
            echo "‚úÖ **Unit Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Unit Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.integration-test.result }}" == "success" ]; then
            echo "‚úÖ **Integration Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Integration Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "‚úÖ **Build Check**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Build Check**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Fail the job if any dependency failed
          if [ "${{ needs.analyze.result }}" != "success" ] || 
             [ "${{ needs.test.result }}" != "success" ] || 
             [ "${{ needs.integration-test.result }}" != "success" ] || 
             [ "${{ needs.build.result }}" != "success" ]; then
            echo "‚ùå **Quality Gate**: FAILED - Some checks did not pass"
            exit 1
          else
            echo "‚úÖ **Quality Gate**: PASSED - All checks successful!"
          fi
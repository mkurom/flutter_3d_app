// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_3d_app/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flutter_3d_app/features/maze_ball/domain/entities/ball.dart'
    as _i3;
import 'package:flutter_3d_app/features/maze_ball/domain/entities/game_state.dart'
    as _i4;
import 'package:flutter_3d_app/features/maze_ball/domain/entities/maze.dart'
    as _i2;
import 'package:flutter_3d_app/features/maze_ball/domain/repositories/game_repository.dart'
    as _i5;
import 'package:flutter_3d_app/features/maze_ball/domain/repositories/maze_repository.dart'
    as _i7;
import 'package:flutter_3d_app/features/maze_ball/domain/repositories/sensor_repository.dart'
    as _i8;
import 'package:flutter_3d_app/features/maze_ball/domain/usecases/game_usecase.dart'
    as _i11;
import 'package:flutter_3d_app/features/maze_ball/domain/usecases/physics_usecase.dart'
    as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:vector_math/vector_math.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMaze_0 extends _i1.SmartFake implements _i2.Maze {
  _FakeMaze_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBall_1 extends _i1.SmartFake implements _i3.Ball {
  _FakeBall_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGameState_2 extends _i1.SmartFake implements _i4.GameState {
  _FakeGameState_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GameRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGameRepository extends _i1.Mock implements _i5.GameRepository {
  MockGameRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> saveGameState(_i4.GameState? gameState) =>
      (super.noSuchMethod(
            Invocation.method(#saveGameState, [gameState]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<_i4.GameState?> loadGameState() =>
      (super.noSuchMethod(
            Invocation.method(#loadGameState, []),
            returnValue: _i6.Future<_i4.GameState?>.value(),
          )
          as _i6.Future<_i4.GameState?>);

  @override
  _i6.Future<void> resetGameState() =>
      (super.noSuchMethod(
            Invocation.method(#resetGameState, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> saveBestTime(int? level, Duration? time) =>
      (super.noSuchMethod(
            Invocation.method(#saveBestTime, [level, time]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<Duration?> getBestTime(int? level) =>
      (super.noSuchMethod(
            Invocation.method(#getBestTime, [level]),
            returnValue: _i6.Future<Duration?>.value(),
          )
          as _i6.Future<Duration?>);
}

/// A class which mocks [MazeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMazeRepository extends _i1.Mock implements _i7.MazeRepository {
  MockMazeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Maze> generateMaze(int? width, int? height) =>
      (super.noSuchMethod(
            Invocation.method(#generateMaze, [width, height]),
            returnValue: _i6.Future<_i2.Maze>.value(
              _FakeMaze_0(
                this,
                Invocation.method(#generateMaze, [width, height]),
              ),
            ),
          )
          as _i6.Future<_i2.Maze>);

  @override
  _i6.Future<_i2.Maze> getMazeForLevel(int? level) =>
      (super.noSuchMethod(
            Invocation.method(#getMazeForLevel, [level]),
            returnValue: _i6.Future<_i2.Maze>.value(
              _FakeMaze_0(this, Invocation.method(#getMazeForLevel, [level])),
            ),
          )
          as _i6.Future<_i2.Maze>);
}

/// A class which mocks [SensorRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSensorRepository extends _i1.Mock implements _i8.SensorRepository {
  MockSensorRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Stream<_i9.Vector2> startAccelerometerStream() =>
      (super.noSuchMethod(
            Invocation.method(#startAccelerometerStream, []),
            returnValue: _i6.Stream<_i9.Vector2>.empty(),
          )
          as _i6.Stream<_i9.Vector2>);

  @override
  void stopAccelerometerStream() => super.noSuchMethod(
    Invocation.method(#stopAccelerometerStream, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [PhysicsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhysicsUseCase extends _i1.Mock implements _i10.PhysicsUseCase {
  MockPhysicsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Ball updateBallPhysics(
    _i3.Ball? ball,
    _i9.Vector2? tiltForce,
    _i2.Maze? maze,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateBallPhysics, [ball, tiltForce, maze]),
            returnValue: _FakeBall_1(
              this,
              Invocation.method(#updateBallPhysics, [ball, tiltForce, maze]),
            ),
          )
          as _i3.Ball);

  @override
  bool checkGoalReached(_i3.Ball? ball, _i2.Maze? maze) =>
      (super.noSuchMethod(
            Invocation.method(#checkGoalReached, [ball, maze]),
            returnValue: false,
          )
          as bool);
}

/// A class which mocks [GameUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGameUseCase extends _i1.Mock implements _i11.GameUseCase {
  MockGameUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i4.GameState> initializeGame() =>
      (super.noSuchMethod(
            Invocation.method(#initializeGame, []),
            returnValue: _i6.Future<_i4.GameState>.value(
              _FakeGameState_2(this, Invocation.method(#initializeGame, [])),
            ),
          )
          as _i6.Future<_i4.GameState>);

  @override
  _i4.GameState updateGameState(
    _i4.GameState? gameState,
    _i9.Vector2? tiltForce,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateGameState, [gameState, tiltForce]),
            returnValue: _FakeGameState_2(
              this,
              Invocation.method(#updateGameState, [gameState, tiltForce]),
            ),
          )
          as _i4.GameState);

  @override
  _i6.Future<_i4.GameState> nextLevel(_i4.GameState? gameState) =>
      (super.noSuchMethod(
            Invocation.method(#nextLevel, [gameState]),
            returnValue: _i6.Future<_i4.GameState>.value(
              _FakeGameState_2(
                this,
                Invocation.method(#nextLevel, [gameState]),
              ),
            ),
          )
          as _i6.Future<_i4.GameState>);

  @override
  _i6.Future<_i4.GameState> resetGame() =>
      (super.noSuchMethod(
            Invocation.method(#resetGame, []),
            returnValue: _i6.Future<_i4.GameState>.value(
              _FakeGameState_2(this, Invocation.method(#resetGame, [])),
            ),
          )
          as _i6.Future<_i4.GameState>);

  @override
  _i4.GameState updateZoomLevel(_i4.GameState? gameState, double? zoomLevel) =>
      (super.noSuchMethod(
            Invocation.method(#updateZoomLevel, [gameState, zoomLevel]),
            returnValue: _FakeGameState_2(
              this,
              Invocation.method(#updateZoomLevel, [gameState, zoomLevel]),
            ),
          )
          as _i4.GameState);

  @override
  _i6.Future<void> saveGame(_i4.GameState? gameState) =>
      (super.noSuchMethod(
            Invocation.method(#saveGame, [gameState]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<Duration?> getBestTime(int? level) =>
      (super.noSuchMethod(
            Invocation.method(#getBestTime, [level]),
            returnValue: _i6.Future<Duration?>.value(),
          )
          as _i6.Future<Duration?>);
}
